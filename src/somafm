#!/usr/bin/env bash

play () {
  local playlist
  playlist=$(curl -s -H 'Accept: application/json' "${1}" | \
    jq -r ".channels | map(select(.id == \"${2}\")) | .[]" | \
    jq -r ".playlists | map(select(.quality == \"${3}\")) | limit(1;.[]) | .url")

  case "${playlist}" in
    '') echo "error in channel or quality"; return 1 ;;
    *) mpv --no-config "${playlist}" 2> /dev/null | awk '/title/ { s = ""; for (i = 2; i <= NF; i++) s = s $i " "; cmd="(date +'%H:%M:%S')"; cmd | getline d; print d,"|",s; close(cmd) }' ;;
  esac
}

channels () {
  local channels 
  channels=$(curl -s -H 'Accept: application/json' "${1}" | \
    jq -r '.channels | sort_by(.listeners | tonumber) | reverse | .[]' | \
    jq -r -j '.id + " | "')

  case "${channels}" in
    '') echo "error retrieving channel list"; return 1 ;;
    *) echo "${channels}" ;;
  esac
}

helpme () {
  local a
  read -r -a a <<< "${0//\// }"
  local bin=${a[${#a[@]}-1]}

  echo 'Usage:'
  echo "  ${bin} play <channel> [quality <low|high|highest>]"
  echo "  ${bin} channels"
  echo "  ${bin} helpme"
  echo "  ${bin} version"
  echo
  echo 'Commands:'
  echo '  -p|play       Play channel'
  echo '  -c|channels   List channels'
  echo '  -h|helpme     Display this summary'
  echo '  -v|version    Display script version'
  echo
  echo 'Options:'
  echo '  -q|quality    Channel quality (default: high)'
}

version () {
  echo "version ${1}"
}

main () {
  case "${1}" in
    -p|play)
      if [ -n "${2}" ]; then channel="${2}"; else helpme; return 1; fi
      if [ "${3}" = "quality" ] || [ "${3}" = "-q" ]; then quality="${4}"; else quality="high"; fi
      play "${url}" "${channel}" "${quality}"
      return "$?" ;;
    -c|channels) channels "${url}"; return "$?" ;;
    -h|helpme) helpme; return 0 ;;
    -v|version) version "${version}"; return 0 ;;
    *) helpme; return 1 ;;
  esac
}

version='1.0.0'
url='https://somafm.com/channels.json'
main "$@"
